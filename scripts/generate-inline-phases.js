#!/usr/bin/env node

/**
 * Generate a TypeScript module exporting all moon phase images and video as data URIs.
 * Output file: src/assets/phases.inline.ts
 */

const fs = require('fs');
const path = require('path');

const SRC_DIR = path.join(__dirname, '../src/assets/phases');
const OUTPUT_TS = path.join(__dirname, '../src/assets/phases.inline.ts');

function toDataUri(buffer, mime) {
  const b64 = buffer.toString('base64');
  return `data:${mime};base64,${b64}`;
}

function main() {
  if (!fs.existsSync(SRC_DIR)) {
    console.error('❌ Source phases directory not found:', SRC_DIR);
    process.exit(1);
  }

  const entries = fs.readdirSync(SRC_DIR);

  // Helper to sort by numeric frame index
  const sortByIndex = (a, b) => {
    const ai = parseInt(a.match(/(\d{4})/)[1], 10);
    const bi = parseInt(b.match(/(\d{4})/)[1], 10);
    return ai - bi;
  };

  // Select 30 daily frames directly from the source directory
  const frameFiles = entries
    .filter((f) => /^moon\.(\d{4})\.jpg$/.test(f))
    .sort(sortByIndex);
  if (frameFiles.length < 236) {
    console.error('❌ Expected 236 frames in src/assets/phases');
    process.exit(1);
  }
  // frame number = (days × 8) + 1 for days 0..29
  const dailyIndices = Array.from({ length: 30 }, (_, d) => 1 + d * 8);
  const needed = new Set(dailyIndices.map((n) => n.toString().padStart(4, '0')));
  const selectedFiles = frameFiles
    .filter((f) => needed.has(f.match(/(\d{4})/)[1]))
    .map((f) => path.join(SRC_DIR, f));
  if (selectedFiles.length !== 30) {
    console.error(`❌ Daily selection failed. Expected 30, got ${selectedFiles.length}`);
    process.exit(1);
  }

  const frames = selectedFiles.map((filePath) => {
    const buf = fs.readFileSync(filePath);
    return toDataUri(buf, 'image/jpeg');
  });

  // Optional video in src dir
  const videoPath = path.join(SRC_DIR, 'moon_720p30.webm');
  let videoDataUri = '';
  if (fs.existsSync(videoPath)) {
    const videoBuf = fs.readFileSync(videoPath);
    videoDataUri = toDataUri(videoBuf, 'video/webm');
  }

  const header = `// AUTO-GENERATED FILE. DO NOT EDIT.
// Generated by scripts/generate-inline-phases.js
// Contains data URIs for moon phase images and optional video
`;

  const content = [
    header,
    `export const MOON_PHASE_DATA_URIS: string[] = ${JSON.stringify(frames)};`,
    `export const MOON_VIDEO_DATA_URI: string${videoDataUri ? '' : ' | undefined'} = ${JSON.stringify(videoDataUri || undefined)};`,
    '',
  ].join('\n');

  fs.writeFileSync(OUTPUT_TS, content);
  console.log(`✅ Generated ${OUTPUT_TS} with ${frames.length} frames${videoDataUri ? ' and video' : ''}.`);
}

main();


